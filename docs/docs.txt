theta8 Documentation
Version 4-BLOODFORTHEBLOODGOD

theta8 is "bad piet clone", thus all programs are in fact images

FILE FORMAT
-----------

theta8 program is 8x8 PPM bitmap. It MUST be P6 type PPM (binary encoded, three color channels).
Any other bitmap format will not be accepted.

MEANING OF BYTES IN PROGRAM
---------------------------

theta8 programs have following structure:

x x x x x x x x
x x x L x x x x
x x x B x x x x
x x x x x G C x
x R M x x x x x
x x x x Y x x x
x x x x W x x x
x x x x x x x x

x - program bytes
Letters are variable that are stored in corresponding pixel.

PROGRAM
-------

As you could guess from before, each theta8 program has 56 bytes (or less).
Commands are colorcoded with basic colors:
Red     - #FF0000
Green   - #00FF00
Blue    - #0000FF
Cyan    - #00FFFF
Magenta - #FF00FF
Yellow  - #FFFF00
White   - #FFFFFF
Black   - #000000
This means that there are 8 commands and 8 accessible one byte long unsigned variables.
Execution of program starts from top-left corner if program reaches down-right corner without proper termination when loading arguments for a command it will load White pixels (while producing warnings). If even then the program doesn't stop interpreter will keep loading White pixels. White command with White argument is End command which will terminate the program.
Due to problems with converting 24bit RGB to unsigned chars if you want to hardcode arbitrary byte values (like ASCII values) you should set red channel value of pixel in your image editor to desired value.
When commands refer to their arguments, these arguments are next pixels (those which are on the right side of the command pixel) of the program (note that variable pixels are excluded from program space).
When something refers to "address" of command or program cell it means value from 0 to 55 which is real size of the program (no variables).
Also there is 16 bytes big stack which can not be accessed directly, it is used for jumping.

VARIABLES
---------
There are 8 variables, each described by one color from list above.
They are all unsigned chars, however half of them are "text" variables and second half are "numeric".

Text:
Black   - Bl/L
Blue    - B
Green   - G
Cyan    - C

Numeric:
Red     - R
Magenta - M
Yellow  - Y
White   - W

The difference is that when Print command is used with text variables coresponding ASCII character is displayed, while when
printing numeric variables just value is displayed. Same applied when used with Ask command.

Also when some commands are refering to "next variable", next variable is determined from list above ex.
next variable to Black is Blue, to Red is Magenta and to White is Black

COMMANDS
--------
There are 8 commands, each described by one color:
Red     - Print
Green   - Ask
Blue    - Set
Cyan    - If
Magenta - Math
Yellow  - Jump
White   - End
Black   - RID

In theta8 there are two color orders used. Binary (Bl B G C R M Y W) mirrors the memory representation of variables.
However for almost everything else RGB is used (R G B C M Y W Bl) is used. Usually Red operation is the most "basic" and "default". White and Black most commonly go unused.
This can be confusing, but it is useful to remember these orders when coding in theta8.

Print
-----

Arguments:
Variable

Displays chosen variable on screen.
Text variables (Bl B G C) are displayed by their corresponding character in ASCII and
numeric variables (R M Y W) are displayed as number from 0 to 255.


Ask
---

Arguments:
Variable

Takes input from the user and stores it in chosen variable.
When text variable (Bl B G C) is inputted, user is asked for entering a single ASCII character. Its code is stored in variable.
When numeric variable (R M Y W) is inputted, user is asked for entering a number from 0 to 255.

Set
---

Arguments:
Set Type
Value 1
Value 2

Depending on the Set Type:

Set Type  Value 1 is     Value 2 is
Red       Variable       Variable
Green     Value          Variable
Blue      Variable       Address
Cyan      Value          Address
Magenta   Address        Variable
Yellow    Address        Address
Black     Addr(Var)      Variable
White     Variable       Addr(Var)

Variable - Color of one of variables
Value - Arbitrary value coded in Red byte of the pixel
Address - Address of one of the bytes in program (0-55), coded in Red byte of the pixel
Addr(Var) - Address that given variable value equals to

After determining Set Type, value 1 is copied to value 2 ex.
Value of Red variable copied to Blue Variable
Value 0x45 to Black variable
Value of byte 0x05 to Blue variable
Address which variable Magenta points to to Blue variable

If
--

Arguments:
Condition
Variable
Command

Firstly condition is determined:
Red     - ==
Green   - >
Blue    - <
Cyan    - >=
Magenta - <=
Yellow  - !=
Black   - unused
White   - unused

Then variable next to chosen variable is taken (see VARIABLES chapter).
Then the condition is checked on these variables.
Example:
Variable chosen - a
Variable next to it - b
Condition - >=
What If does:
a >= b

If condition is true command is executed if not it is skipped.
Note that if there are two If commands one after another (if if command), and condition for first If is false, the second If will be skipped,
but then command after it will be executed normally.

Math
----

Arguments:
Operation
Variable

Math performs mathematical operations on given variable and next variable, result is stored in next variable.
Variable provided is on the right side of equation.

Chosen variable -> a;
Variable next to it -> b;

Operation      What Math Command does
Red            b = b + a;
Green          b = b - a;
Blue           b = b * a;
Cyan           b = b / a;
Magenta        b = b % a;
Yellow         b = ~(b & a);
Black          b = b & a;
White          b = b | a;

Jump
----

Arguments:
Address

If address is 0x0 returns to the top address on stack and then pops it. If stack is empty does nothing.
If address is not zero jumps to it and puts current address on stack. If stack is full overwrites last cell.

RID
---

Arguments:
RID operation
Variable

RID stands for Rotate Increment Decrement and I made it due to lack of easy way to increment or decrement something.

Chosen variable -> a

RID Operation      What RID does
Red                a++
Green              a--
Blue               a = a << 1
Cyan               a = a >> 1
Magenta            a = ~a
Yellow             a = rand()
Black              swaps values of a with next variable to a
White              unused

END
---

Arguments:
End operation

In version 2, Blue and Magenta operations were deprecated and Black and White operations were added.

End command resets program data in various ways:

| End Operation   | Program Ends | Vars   Reset | Program Reset | Stack Reset | PC Reset | Black Randomized |
| --------------- | ------------ | ------------ | ------------- | ----------- | -------- | ---------------- |
| Red             |    XXX       |              |               |             |          |                  |
| Green           |              |     XXX      |     XXX       |     XXX     |    XXX   |                  |
| Blue(unused)    |              |              |               |             |          |                  |
| Cyan            |              |              |     XXX       |     XXX     |    XXX   |                  |
| Magenta(unused) |              |              |               |             |          |                  |
| Yellow          |              |              |     XXX       |     XXX     |    XXX   |       XXX        |
| Black           |              |              |               |             |    XXX   |                  |
| White           |    XXX       |              |               |             |          |                  |

Vars Reset means that all variables are set back to their default values defined in program.
Program Reset means that all modifications made to the program code by Set commands are reverted and program is loaded again from file.
Stack Reset means that Stack Pointer is set back to zero and all values on Stack are zeroed.
PC Reset means that Program Counter is set to zero. However if operation is Black, current PC value is pushed to stack like in Jump command.
Black Randomized means that value of Black variable is set to random value.
